%
% ancienne fonction mult
%

mult(M1,M2)->
    Dim1 = [length(M1)|length(lists:nth(1,M1))],
    Dim2 = [length(M2)|length(lists:nth(1,M2))],
    mult(M1,M2,Dim1,Dim2).

mult(M1,M2,[M|N],[N|P]) when N > ?MAX_LENGTH, M> ?MAX_LENGTH, P> ?MAX_LENGTH -> %done
    CN = trunc(N/2),
    CM = trunc(M/2),
    CP = P-CM,
    if CP<1 ->
        CN = trunc(N/2),
        CM = trunc(M/2),
        {A13, A24} = splitLine(M1,[],[],CN),
        {A1,A3} = lists:split(CM,A13),
        {A2,A4} = lists:split(CM,A24),
        {B1,B2} = lists:split(CN,M2),
        C1 = add(mult(A1,B1),mult(A2,B2)),
        C2 = add(mult(A3,B1),mult(A4,B2)),
        lists:append(C1,C2);
    true ->
        {A13, A24} = splitLine(M1,[],[],CN),
        {A1,A3} = lists:split(CM,A13),
        {A2,A4} = lists:split(CM,A24),
        {B13, B24} = splitLine(M2,[],[],CP),
        {B1,B3} = lists:split(CN,B13),
        {B2,B4} = lists:split(CN,B24),
        C1 = add(mult(A1,B1),mult(A2,B3)),
        C2 = add(mult(A1,B2),mult(A2,B4)),
        C3 = add(mult(A3,B1),mult(A4,B3)),
        C4 = add(mult(A3,B2),mult(A4,B4)),
        recompose4(C1,C2,C3,C4)
    end;
    
mult(M1,M2,[_|N],[N|P]) when N > ?MAX_LENGTH, P> ?MAX_LENGTH -> %done
    CN = trunc(N/2),
    CP = trunc(P/2),
    {A1,A2} = splitLine(M1,[],[], CN),
    {B1,B2} = lists:split(CN,M2),
    {B11,B12} = splitLine(B1,[],[], CP),
    {B21,B22} = splitLine(B2,[],[], CP),
    C1 = add(mult(A1,B11),mult(A2,B21)),
    C2 = add(mult(A1,B12), mult(A2,B22)),
    appendEach(C1,C2);

mult(M1,M2,[M|N],[N|_]) when N > ?MAX_LENGTH, M> ?MAX_LENGTH-> %done
    CN = trunc(N/2),
    CM = trunc(M/2),
    {A13, A24} = splitLine(M1,[],[],CN),
    {A1,A3} = lists:split(CM,A13),
    {A2,A4} = lists:split(CM,A24),
    {B1,B2} = lists:split(CN,M2),
    C1 = add(mult(A1,B1),mult(A2,B2)),
    C2 = add(mult(A3,B1),mult(A4,B2)),
    lists:append(C1,C2);

mult(M1,M2,[_|N],[N|_]) when N > ?MAX_LENGTH -> % done
    CN = trunc(N/2),
    {A1,A2} = splitLine(M1,[],[],CN),
    {B1,B2} = lists:split(CN, M2),
    C1 = mult(A1,B1),
    C2 = mult(A2,B2),
    add(C1,C2);

mult(M1,M2,[M|N],[N|P]) when M> ?MAX_LENGTH, P> ?MAX_LENGTH -> % done
    CM = trunc(M/2),
    CP = P-CM,
    if CP<1 ->
        Co1 = trunc(M/2),
        {A1,A2} = lists:split(Co1, M1),
        C1 = mult(A1,M2),
        C2 = mult(A2,M2),
        lists:append(C1,C2);
    true ->
        {A1,A2} = lists:split(CM,M1),
        {B1,B2} = splitLine(M2,[],[],CP),
        recompose4(mult(A1,B1),mult(A1,B2),mult(A2,B1),mult(A2,B2))
    end;

mult(M1,M2,[_|N],[N|P]) when P> ?MAX_LENGTH -> % done
    CP = trunc(P/2),
    {B1,B2} = splitLine(M2,[],[],CP),
    C1 = mult(M1,B1),
    C2 = mult(M1,B2),
    appendEach(C1,C2);

mult(M1,M2,[M|N],[N|_]) when M> ?MAX_LENGTH-> % done
    Co1 = trunc(M/2),
    {A1,A2} = lists:split(Co1, M1),
    C1 = mult(A1,M2),
    C2 = mult(A2,M2),
    lists:append(C1,C2);

mult(M1,M2,[_|N],[N|_]) -> %done
    mat:'*'(M1,M2).