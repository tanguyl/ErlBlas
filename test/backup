square_matrix_test_core() ->
    run_x_times(square_matrix_test_basic, 2),
    run_x_times(square_matrix_test_transpose, 2),
    run_x_times(square_matrix_test_transpose_and_scale, 2).

square_matrix_test_basic() ->
    A = generateRandMat(50, 50),
    B = generateRandMat(50, 50),
    C = generateRandMat(50, 50),
    ANumerl = erlBlas:matrix(A),
    BNumerl = erlBlas:matrix(B),
    CNumerl = erlBlas:matrix(C),
    erlBlas:dgemm(false, false, 1, ANumerl, BNumerl, 1, CNumerl),
    ?assert('=='(erlBlas:toErl(CNumerl), eval([A, '*', B, '+', C]))).

square_matrix_test_transpose() ->
    A = generateRandMat(50, 50),
    B = generateRandMat(50, 50),
    C = generateRandMat(50, 50),
    ANumerl = erlBlas:matrix(A),
    BNumerl = erlBlas:matrix(B),
    CNumerl = erlBlas:matrix(C),
    erlBlas:dgemm(true, false, 1, ANumerl, BNumerl, 1, CNumerl),
    ?assert('=='(erlBlas:toErl(CNumerl), eval([tr(A), '*', B, '+', C]))),
    A2 = generateRandMat(50, 50),
    B2 = generateRandMat(50, 50),
    C2 = generateRandMat(50, 50),
    ANumerl2 = erlBlas:matrix(A2),
    BNumerl2 = erlBlas:matrix(B2),
    CNumerl2 = erlBlas:matrix(C2),
    erlBlas:dgemm(false, true, 1, ANumerl2, BNumerl2, 1, CNumerl2),
    ?assert('=='(erlBlas:toErl(CNumerl2), eval([A2, '*', tr(B2), '+', C2]))),
    A3 = generateRandMat(50, 50),
    B3 = generateRandMat(50, 50),
    C3 = generateRandMat(50, 50),
    ANumerl3 = erlBlas:matrix(A3),
    BNumerl3 = erlBlas:matrix(B3),
    CNumerl3 = erlBlas:matrix(C3),
    erlBlas:dgemm(true, true, 1, ANumerl3, BNumerl3, 1, CNumerl3),
    ?assert('=='(erlBlas:toErl(CNumerl3), eval([tr(A3), '*', tr(B3), '+', C3]))).

square_matrix_test_transpose_and_scale() ->
    A = generateRandMat(50, 50),
    B = generateRandMat(50, 50),
    C = generateRandMat(50, 50),
    ANumerl = erlBlas:matrix(A),
    BNumerl = erlBlas:matrix(B),
    CNumerl = erlBlas:matrix(C),
    Num1 = rand:uniform(10) / 9,
    erlBlas:dgemm(true, false, Num1, ANumerl, BNumerl, 1, CNumerl),
    ?assert('=='(erlBlas:toErl(CNumerl), eval([Num1, '*', tr(A), '*', B, '+', C]))),
    A2 = generateRandMat(50, 50),
    B2 = generateRandMat(50, 50),
    C2 = generateRandMat(50, 50),
    ANumerl2 = erlBlas:matrix(A2),
    BNumerl2 = erlBlas:matrix(B2),
    CNumerl2 = erlBlas:matrix(C2),
    Num2 = rand:uniform(10) / 9,
    Num3 = rand:uniform(10) / 9,
    erlBlas:dgemm(false, true, Num2, ANumerl2, BNumerl2, Num3, CNumerl2),
    Afois = '*'(Num2, A2),
    Cfois = '*'(Num3, C2),
    AB = '*'(Afois, tr(B2)),
    Result = '+'(AB, Cfois),
    ?assert('=='(erlBlas:toErl(CNumerl2), Result)),
    A3 = generateRandMat(50, 50),
    B3 = generateRandMat(50, 50),
    C3 = generateRandMat(50, 50),
    ANumerl3 = erlBlas:matrix(A3),
    BNumerl3 = erlBlas:matrix(B3),
    CNumerl3 = erlBlas:matrix(C3),
    Num4 = rand:uniform(10) / 9,
    Cfois2 = '*'(Num4, C3),
    AB2 = '*'(tr(A3), tr(B3)),
    Result2 = '+'(AB2, Cfois2),
    erlBlas:dgemm(true, true, 1, ANumerl3, BNumerl3, Num4, CNumerl3),
    ?assert('=='(erlBlas:toErl(CNumerl3), Result2)).
